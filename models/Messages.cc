/**
 *
 *  Messages.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Messages.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::e2ee;

const std::string Messages::Cols::_id = "\"id\"";
const std::string Messages::Cols::_from_user = "\"from_user\"";
const std::string Messages::Cols::_to_user = "\"to_user\"";
const std::string Messages::Cols::_ciphertext = "\"ciphertext\"";
const std::string Messages::Cols::_created_at = "\"created_at\"";
const std::string Messages::Cols::_delivered = "\"delivered\"";
const std::string Messages::primaryKeyName = "id";
const bool Messages::hasPrimaryKey = true;
const std::string Messages::tableName = "\"messages\"";

const std::vector<typename Messages::MetaData> Messages::metaData_={
{"id","std::string","uuid",0,0,1,1},
{"from_user","std::string","uuid",0,0,0,0},
{"to_user","std::string","uuid",0,0,0,0},
{"ciphertext","std::string","text",0,0,0,1},
{"created_at","::trantor::Date","timestamp without time zone",0,0,0,0},
{"delivered","bool","boolean",1,0,0,0}
};
const std::string &Messages::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Messages::Messages(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<std::string>(r["id"].as<std::string>());
        }
        if(!r["from_user"].isNull())
        {
            fromUser_=std::make_shared<std::string>(r["from_user"].as<std::string>());
        }
        if(!r["to_user"].isNull())
        {
            toUser_=std::make_shared<std::string>(r["to_user"].as<std::string>());
        }
        if(!r["ciphertext"].isNull())
        {
            ciphertext_=std::make_shared<std::string>(r["ciphertext"].as<std::string>());
        }
        if(!r["created_at"].isNull())
        {
            auto timeStr = r["created_at"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(r["delivered"].as<bool>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 6 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fromUser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            toUser_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            ciphertext_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            delivered_=std::make_shared<bool>(r[index].as<bool>());
        }
    }

}

Messages::Messages(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            toUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ciphertext_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            delivered_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
}

Messages::Messages(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("from_user"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["from_user"].isNull())
        {
            fromUser_=std::make_shared<std::string>(pJson["from_user"].asString());
        }
    }
    if(pJson.isMember("to_user"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["to_user"].isNull())
        {
            toUser_=std::make_shared<std::string>(pJson["to_user"].asString());
        }
    }
    if(pJson.isMember("ciphertext"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["ciphertext"].isNull())
        {
            ciphertext_=std::make_shared<std::string>(pJson["ciphertext"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("delivered"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(pJson["delivered"].asBool());
        }
    }
}

void Messages::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 6)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<std::string>(pJson[pMasqueradingVector[0]].asString());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fromUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            toUser_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            ciphertext_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            delivered_=std::make_shared<bool>(pJson[pMasqueradingVector[5]].asBool());
        }
    }
}

void Messages::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<std::string>(pJson["id"].asString());
        }
    }
    if(pJson.isMember("from_user"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["from_user"].isNull())
        {
            fromUser_=std::make_shared<std::string>(pJson["from_user"].asString());
        }
    }
    if(pJson.isMember("to_user"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["to_user"].isNull())
        {
            toUser_=std::make_shared<std::string>(pJson["to_user"].asString());
        }
    }
    if(pJson.isMember("ciphertext"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["ciphertext"].isNull())
        {
            ciphertext_=std::make_shared<std::string>(pJson["ciphertext"].asString());
        }
    }
    if(pJson.isMember("created_at"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["created_at"].isNull())
        {
            auto timeStr = pJson["created_at"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                createdAt_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("delivered"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["delivered"].isNull())
        {
            delivered_=std::make_shared<bool>(pJson["delivered"].asBool());
        }
    }
}

const std::string &Messages::getValueOfId() const noexcept
{
    static const std::string defaultValue = std::string();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getId() const noexcept
{
    return id_;
}
void Messages::setId(const std::string &pId) noexcept
{
    id_ = std::make_shared<std::string>(pId);
    dirtyFlag_[0] = true;
}
void Messages::setId(std::string &&pId) noexcept
{
    id_ = std::make_shared<std::string>(std::move(pId));
    dirtyFlag_[0] = true;
}
const typename Messages::PrimaryKeyType & Messages::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Messages::getValueOfFromUser() const noexcept
{
    static const std::string defaultValue = std::string();
    if(fromUser_)
        return *fromUser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getFromUser() const noexcept
{
    return fromUser_;
}
void Messages::setFromUser(const std::string &pFromUser) noexcept
{
    fromUser_ = std::make_shared<std::string>(pFromUser);
    dirtyFlag_[1] = true;
}
void Messages::setFromUser(std::string &&pFromUser) noexcept
{
    fromUser_ = std::make_shared<std::string>(std::move(pFromUser));
    dirtyFlag_[1] = true;
}
void Messages::setFromUserToNull() noexcept
{
    fromUser_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Messages::getValueOfToUser() const noexcept
{
    static const std::string defaultValue = std::string();
    if(toUser_)
        return *toUser_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getToUser() const noexcept
{
    return toUser_;
}
void Messages::setToUser(const std::string &pToUser) noexcept
{
    toUser_ = std::make_shared<std::string>(pToUser);
    dirtyFlag_[2] = true;
}
void Messages::setToUser(std::string &&pToUser) noexcept
{
    toUser_ = std::make_shared<std::string>(std::move(pToUser));
    dirtyFlag_[2] = true;
}
void Messages::setToUserToNull() noexcept
{
    toUser_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Messages::getValueOfCiphertext() const noexcept
{
    static const std::string defaultValue = std::string();
    if(ciphertext_)
        return *ciphertext_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Messages::getCiphertext() const noexcept
{
    return ciphertext_;
}
void Messages::setCiphertext(const std::string &pCiphertext) noexcept
{
    ciphertext_ = std::make_shared<std::string>(pCiphertext);
    dirtyFlag_[3] = true;
}
void Messages::setCiphertext(std::string &&pCiphertext) noexcept
{
    ciphertext_ = std::make_shared<std::string>(std::move(pCiphertext));
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Messages::getValueOfCreatedAt() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(createdAt_)
        return *createdAt_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Messages::getCreatedAt() const noexcept
{
    return createdAt_;
}
void Messages::setCreatedAt(const ::trantor::Date &pCreatedAt) noexcept
{
    createdAt_ = std::make_shared<::trantor::Date>(pCreatedAt);
    dirtyFlag_[4] = true;
}
void Messages::setCreatedAtToNull() noexcept
{
    createdAt_.reset();
    dirtyFlag_[4] = true;
}

const bool &Messages::getValueOfDelivered() const noexcept
{
    static const bool defaultValue = bool();
    if(delivered_)
        return *delivered_;
    return defaultValue;
}
const std::shared_ptr<bool> &Messages::getDelivered() const noexcept
{
    return delivered_;
}
void Messages::setDelivered(const bool &pDelivered) noexcept
{
    delivered_ = std::make_shared<bool>(pDelivered);
    dirtyFlag_[5] = true;
}
void Messages::setDeliveredToNull() noexcept
{
    delivered_.reset();
    dirtyFlag_[5] = true;
}

void Messages::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Messages::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "from_user",
        "to_user",
        "ciphertext",
        "created_at",
        "delivered"
    };
    return inCols;
}

void Messages::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFromUser())
        {
            binder << getValueOfFromUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getToUser())
        {
            binder << getValueOfToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCiphertext())
        {
            binder << getValueOfCiphertext();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDelivered())
        {
            binder << getValueOfDelivered();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Messages::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    return ret;
}

void Messages::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getFromUser())
        {
            binder << getValueOfFromUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getToUser())
        {
            binder << getValueOfToUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getCiphertext())
        {
            binder << getValueOfCiphertext();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getCreatedAt())
        {
            binder << getValueOfCreatedAt();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getDelivered())
        {
            binder << getValueOfDelivered();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Messages::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromUser())
    {
        ret["from_user"]=getValueOfFromUser();
    }
    else
    {
        ret["from_user"]=Json::Value();
    }
    if(getToUser())
    {
        ret["to_user"]=getValueOfToUser();
    }
    else
    {
        ret["to_user"]=Json::Value();
    }
    if(getCiphertext())
    {
        ret["ciphertext"]=getValueOfCiphertext();
    }
    else
    {
        ret["ciphertext"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getDelivered())
    {
        ret["delivered"]=getValueOfDelivered();
    }
    else
    {
        ret["delivered"]=Json::Value();
    }
    return ret;
}

Json::Value Messages::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 6)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFromUser())
            {
                ret[pMasqueradingVector[1]]=getValueOfFromUser();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getToUser())
            {
                ret[pMasqueradingVector[2]]=getValueOfToUser();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getCiphertext())
            {
                ret[pMasqueradingVector[3]]=getValueOfCiphertext();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getCreatedAt())
            {
                ret[pMasqueradingVector[4]]=getCreatedAt()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getDelivered())
            {
                ret[pMasqueradingVector[5]]=getValueOfDelivered();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFromUser())
    {
        ret["from_user"]=getValueOfFromUser();
    }
    else
    {
        ret["from_user"]=Json::Value();
    }
    if(getToUser())
    {
        ret["to_user"]=getValueOfToUser();
    }
    else
    {
        ret["to_user"]=Json::Value();
    }
    if(getCiphertext())
    {
        ret["ciphertext"]=getValueOfCiphertext();
    }
    else
    {
        ret["ciphertext"]=Json::Value();
    }
    if(getCreatedAt())
    {
        ret["created_at"]=getCreatedAt()->toDbStringLocal();
    }
    else
    {
        ret["created_at"]=Json::Value();
    }
    if(getDelivered())
    {
        ret["delivered"]=getValueOfDelivered();
    }
    else
    {
        ret["delivered"]=Json::Value();
    }
    return ret;
}

bool Messages::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("from_user"))
    {
        if(!validJsonOfField(1, "from_user", pJson["from_user"], err, true))
            return false;
    }
    if(pJson.isMember("to_user"))
    {
        if(!validJsonOfField(2, "to_user", pJson["to_user"], err, true))
            return false;
    }
    if(pJson.isMember("ciphertext"))
    {
        if(!validJsonOfField(3, "ciphertext", pJson["ciphertext"], err, true))
            return false;
    }
    else
    {
        err="The ciphertext column cannot be null";
        return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, true))
            return false;
    }
    if(pJson.isMember("delivered"))
    {
        if(!validJsonOfField(5, "delivered", pJson["delivered"], err, true))
            return false;
    }
    return true;
}
bool Messages::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Messages::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("from_user"))
    {
        if(!validJsonOfField(1, "from_user", pJson["from_user"], err, false))
            return false;
    }
    if(pJson.isMember("to_user"))
    {
        if(!validJsonOfField(2, "to_user", pJson["to_user"], err, false))
            return false;
    }
    if(pJson.isMember("ciphertext"))
    {
        if(!validJsonOfField(3, "ciphertext", pJson["ciphertext"], err, false))
            return false;
    }
    if(pJson.isMember("created_at"))
    {
        if(!validJsonOfField(4, "created_at", pJson["created_at"], err, false))
            return false;
    }
    if(pJson.isMember("delivered"))
    {
        if(!validJsonOfField(5, "delivered", pJson["delivered"], err, false))
            return false;
    }
    return true;
}
bool Messages::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 6)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Messages::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isBool())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
